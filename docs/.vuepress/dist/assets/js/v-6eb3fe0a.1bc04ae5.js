"use strict";(self.webpackChunkinterview_fe=self.webpackChunkinterview_fe||[]).push([[138],{3530:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-6eb3fe0a",path:"/JS/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",title:"数据类型",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"JS 数据类型有哪些？🌟",slug:"js-数据类型有哪些",children:[]},{level:3,title:"基本类型和引用类型的区别🌟",slug:"基本类型和引用类型的区别",children:[]},{level:3,title:"typeof 和 instanceof 的区别🌟",slug:"typeof-和-instanceof-的区别",children:[]},{level:3,title:"判断数组的方法以及优劣势",slug:"判断数组的方法以及优劣势",children:[]},{level:3,title:"null 与 undefined 的区别是什么？",slug:"null-与-undefined-的区别是什么",children:[]},{level:3,title:"为什么会有 bigInt 的出现？",slug:"为什么会有-bigint-的出现",children:[]},{level:3,title:"0.1 + 0.2为什么不等于0.3？",slug:"_0-1-0-2为什么不等于0-3",children:[]},{level:3,title:"数组相关操作有哪些？🌟",slug:"数组相关操作有哪些",children:[]},{level:3,title:"什么是数组的纯函数？",slug:"什么是数组的纯函数",children:[]},{level:3,title:"map 的使用",slug:"map-的使用",children:[]},{level:3,title:"==、=== 和 Object.is() 的使用情况？",slug:"、-和-object-is-的使用情况",children:[]},{level:2,title:"隐式类型转换会在那里出现？🌟",slug:"隐式类型转换会在那里出现",children:[]}],filePathRelative:"JS/数据类型.md",git:{updatedTime:1638182112e3,contributors:[{name:"brightLian",email:"brightLian@126.com",commits:2}]}}},6279:(n,a,s)=>{s.r(a),s.d(a,{default:()=>g});var e=s(6252);const l=(0,e.uE)('<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h1><h3 id="js-数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#js-数据类型有哪些" aria-hidden="true">#</a> JS 数据类型有哪些？🌟</h3><ul><li>分类：分为基本类型和引用类型。</li><li>基本类型：Null、undefined、Boolean、String、Number、Symbol、BigInt</li><li>引用类型：Object（Array、Function、Object）</li></ul><h3 id="基本类型和引用类型的区别" tabindex="-1"><a class="header-anchor" href="#基本类型和引用类型的区别" aria-hidden="true">#</a> 基本类型和引用类型的区别🌟</h3><table><thead><tr><th style="text-align:center;">区别点</th><th style="text-align:center;">基本类型</th><th style="text-align:center;">引用类型</th></tr></thead><tbody><tr><td style="text-align:center;">可变性</td><td style="text-align:center;">一经确定就不可变</td><td style="text-align:center;">可以为其添加属性和方法、也可以删除属性和方法</td></tr><tr><td style="text-align:center;">比较方式</td><td style="text-align:center;">值的比较</td><td style="text-align:center;">引用地址的比较</td></tr><tr><td style="text-align:center;">存储位置</td><td style="text-align:center;">存储在栈中</td><td style="text-align:center;">变量的标识符和地址存储在栈中、实际的值存储在堆中</td></tr></tbody></table><h3 id="typeof-和-instanceof-的区别" tabindex="-1"><a class="header-anchor" href="#typeof-和-instanceof-的区别" aria-hidden="true">#</a> typeof 和 instanceof 的区别🌟</h3>',6),t=(0,e.Uk)("typeof "),i=(0,e._)("li",null,"用途：对基本类型进行判断",-1),p=(0,e._)("li",null,"返回值：返回的一个字符串，是对应的数据类型",-1),c=(0,e._)("li",null,"原理：根据机器码的后三位地址信息",-1),u=(0,e.Uk)("特殊性： "),o=(0,e.Uk)("可以判断引用类型中的函数，会返回字符串 function（原因是函数的原型上包含了 call 方法，"),r={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("详细可看"),k=(0,e.Uk)("）"),h=(0,e._)("li",null,"不能判断 null，返回 object。（后三位为000时会返回 object，null 的机器码全是0，所以为 object）",-1),b=(0,e._)("li",null,[(0,e.Uk)("instanceof "),(0,e._)("ul",null,[(0,e._)("li",null,"用途：对引用类型进行判断，但是所有的引用类型都是 Object 的实例"),(0,e._)("li",null,"返回值：返回一个布尔值"),(0,e._)("li",null,"原理：检测构造函数的 prototype 属性是否出现在实例对象的原型链上（右操作数的显示原型是否出现在左操作数的原型链上）")])],-1),m=(0,e.uE)('<h3 id="判断数组的方法以及优劣势" tabindex="-1"><a class="header-anchor" href="#判断数组的方法以及优劣势" aria-hidden="true">#</a> 判断数组的方法以及优劣势</h3><p>常用判断数组的方式有这么几种：instanceof、Object.prototype.toString.call()、Array.isArray()</p><ul><li>instanceof <ul><li>通过检测构造函数的 prototype 属性是否出现在实例对象的原型链上。（右操作数的显示原型是否出现在左操作数的原型链上）</li><li>instanceof 只能用来判断对象类型，基本类型不可以使用。</li><li>所有的对象类型 instanceof Object 都是 true。</li></ul></li><li>Object.prototype.toString.call() <ul><li>这种方法是对所有数据类型都可以进行判断。</li><li>返回值为一个字符串</li></ul></li><li>Array.isArray() <ul><li>ES6以上新增对一种判断数组的方式</li><li>返回值为一个布尔值</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用方式如下：</span>\n<span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr1 <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Array]&#39;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nArray<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="null-与-undefined-的区别是什么" tabindex="-1"><a class="header-anchor" href="#null-与-undefined-的区别是什么" aria-hidden="true">#</a> null 与 undefined 的区别是什么？</h3><ul><li>null：表示没有对象，指向了空地址 <ul><li>用于表示原型链的终点</li></ul></li><li>undefined：表示缺少值，该处应该有值但是未被赋值 <ul><li>变量命名了，但是未被赋值，值就为 undefined</li><li>调用函数应该提供的参数未提供，该参数即为 undefined</li><li>对象没有赋值的属性，该值就为 undefined</li><li>函数没有返回值，默认返回 undefined</li></ul></li></ul><h3 id="为什么会有-bigint-的出现" tabindex="-1"><a class="header-anchor" href="#为什么会有-bigint-的出现" aria-hidden="true">#</a> 为什么会有 bigInt 的出现？</h3><p>主要是为了解决大数运算的问题，用来表示 2^53 - 1 以上的数字。</p><h3 id="_0-1-0-2为什么不等于0-3" tabindex="-1"><a class="header-anchor" href="#_0-1-0-2为什么不等于0-3" aria-hidden="true">#</a> 0.1 + 0.2为什么不等于0.3？</h3><p>小数运算在二进制转换之间出现的问题。</p><h3 id="数组相关操作有哪些" tabindex="-1"><a class="header-anchor" href="#数组相关操作有哪些" aria-hidden="true">#</a> 数组相关操作有哪些？🌟</h3><ul><li>转换方法： <ul><li>toString：方法会返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串。</li><li>valueOf：返回当前数组。</li></ul></li><li>栈方法： <ul><li>pop：从数组中删除最后一个元素，修改原数组，返回被删除的元素。</li><li>push：将一个或多个元素添加到数组的末尾，修改原数组，返回该数组的长度。</li></ul></li><li>队列方法： <ul><li>shift：从数组中删除第一个元素，修改原数组，返回被删除的元素。</li><li>unshift：将一个或多个元素添加到数组的开头，修改原数组，返回该数组的长度。</li></ul></li><li>排序方法： <ul><li>reverse：反转数组，修改原数组，返回反转后的数组。</li><li>sort：对数组进行排序，默认排序会将数组元素转换为字符串，修改原数组，返回排序后的数组</li></ul></li><li>操作方法： <ul><li>concat：基于当前数组的所有项创建新数组，不修改原数组，返回新数组。</li><li>fill：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素，最多可以接受3个参数，修改原数组，返回修改后的数组。</li><li>find：对数组每一项运行给定函数，找出第一个符合条件的数组元素，返回这个元素，找不到则返回 undefined。</li><li>flat：对数组按照指定深度进行展平，不修改原数组，返回新数组。</li><li>includes：用来判断一个数组是否包含一个指定的值，包含返回 true，不包含返回 false。</li><li>split：根据传入的字符作为分隔，将字符串拆分为数组。</li><li>join：将数组的所有元素用指定字符连接成一个字符串，不修改原数组，返回连接后的字符串。</li><li>slice：根据给定参数对数组进行分割操作，不修改原数组，返回分割后的数组。</li><li>splice：通过删除或替换现有元素或在原数组基础上增加新的元素来修改数组，</li></ul></li><li>位置方法： <ul><li>findIndex：对数组每一项运行给定函数，找出第一个符合条件的数组元素，返回这个元素的索引，找不到则返回 -1。</li><li>indexOf：返回数组中可以找到一个给定元素的第一个索引，找不到则返回-1。</li><li>lastIndexOf：返回数组中可以找到一个给定元素的最后一个索引，找不到则返回-1。</li></ul></li><li>迭代方法： <ul><li>every：对数组每一项运行给定函数，如果该函数每一项都返回 true 就返回 true 反之返回 false。</li><li>filter：对数组每一项运行给定函数，返回该函数执行为 true 的项组成的数组，不修改原数组，返回新数组。</li><li>forEach：对数组的每一项运行给定函数，不修改原数组，没有返回值。</li><li>map：对数组的每一项运行给定函数，返回每一项执行后组成的数组，不修改原数组，返回新数组。</li><li>some：对数组每一项运行给定函数，如果该函数某一项返回 true 就返回 true 反之返回 false。</li></ul></li><li>归并方法： <ul><li>reduce：对数组从左到右每一项执行一个给定的 reducer 函数，将其结果汇总为一个单个返回值。</li><li>reduceRight：对数组从右到左每一项执行一个给定的 reducer 函数，将其结果汇总为一个单个返回值。</li></ul></li></ul><h3 id="什么是数组的纯函数" tabindex="-1"><a class="header-anchor" href="#什么是数组的纯函数" aria-hidden="true">#</a> 什么是数组的纯函数？</h3><p>纯函数：不改变原来的数组，返回一个新数组</p><p>有哪些：concat、flat、join、slice、filter、map</p><h3 id="map-的使用" tabindex="-1"><a class="header-anchor" href="#map-的使用" aria-hidden="true">#</a> map 的使用</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token comment">// 返回 [10, NaN, NaN]</span>\n\n<span class="token comment">// 拆解后实际是这样的，考察 map 函数 和 parseInt 第二个参数（2-36之间）</span>\n<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="、-和-object-is-的使用情况" tabindex="-1"><a class="header-anchor" href="#、-和-object-is-的使用情况" aria-hidden="true">#</a> ==、=== 和 Object.is() 的使用情况？</h3><ul><li>区别： <ul><li>==：相等返回true，不相等返回false；允许不同数据类型之间的比较。</li><li>===：只要数据类型不一样，就返回false。</li><li>Object.is()：与 === 行为基本一致，但是有两处不同。</li></ul></li><li>使用： <ul><li>==：只有在判断变量是否为 null 或 undefined 时使用。</li><li>===：除上述外都推荐使用这种方式。</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span> <span class="token comment">// true</span>\n<span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span> <span class="token comment">// false</span>\n\nObject<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nObject<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="隐式类型转换会在那里出现" tabindex="-1"><a class="header-anchor" href="#隐式类型转换会在那里出现" aria-hidden="true">#</a> 隐式类型转换会在那里出现？🌟</h2><p>这个比较重要能出现的题型也比较多，这里不能一一列举，只列举部分情况。需要大家在工作和学习中不断总结</p><ul><li>字符串拼接</li><li>== 运算符</li><li>if 语句</li><li>逻辑运算符</li></ul>',23),f={},g=(0,s(3744).Z)(f,[["render",function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,(0,e._)("ul",null,[(0,e._)("li",null,[t,(0,e._)("ul",null,[i,p,c,(0,e._)("li",null,[u,(0,e._)("ul",null,[(0,e._)("li",null,[o,(0,e._)("a",r,[d,(0,e.Wm)(s)]),k]),h])])])]),b]),m],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);