"use strict";(self.webpackChunkinterview_fe=self.webpackChunkinterview_fe||[]).push([[978],{2059:(e,l,t)=>{t.r(l),t.d(l,{data:()=>i});const i={key:"v-5788e31e",path:"/JS/%E5%85%B6%E4%BB%96%E6%9D%82%E4%B9%B1%E7%9F%A5%E8%AF%86%E7%82%B9.html",title:"其他杂乱知识点",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"什么是深/浅拷贝？",slug:"什么是深-浅拷贝",children:[]},{level:3,title:"什么是 JSON？",slug:"什么是-json",children:[]},{level:3,title:"Symbol 是什么？",slug:"symbol-是什么",children:[]},{level:3,title:"ES6Module 和 CommonJS 模块化的异同点？🌟",slug:"es6module-和-commonjs-模块化的异同点",children:[]},{level:3,title:"Set、Map、WeakSet、WeakMap 之间区别？🌟",slug:"set、map、weakset、weakmap-之间区别",children:[]},{level:3,title:"你对 Proxy 的理解？",slug:"你对-proxy-的理解",children:[]},{level:3,title:"你对 Reflect 的理解？",slug:"你对-reflect-的理解",children:[]},{level:3,title:"babel 编译原理？",slug:"babel-编译原理",children:[]},{level:3,title:"babel 环境搭建和基本配置",slug:"babel-环境搭建和基本配置",children:[]},{level:3,title:"AST 是什么？",slug:"ast-是什么",children:[]},{level:3,title:"谈谈对面向对象的理解？🌟",slug:"谈谈对面向对象的理解",children:[]},{level:3,title:"观察者模式 VS 发布-订阅模式？",slug:"观察者模式-vs-发布-订阅模式",children:[]}],filePathRelative:"JS/其他杂乱知识点.md",git:{updatedTime:1638182112e3,contributors:[{name:"brightLian",email:"brightLian@126.com",commits:4}]}}},4711:(e,l,t)=>{t.r(l),t.d(l,{default:()=>n});const i=(0,t(6252).uE)('<h1 id="其他杂乱知识点" tabindex="-1"><a class="header-anchor" href="#其他杂乱知识点" aria-hidden="true">#</a> 其他杂乱知识点</h1><p>本章节主要是一些零散的知识点，但是很多在面试中也是高频出现的。</p><p>有些像 symbol、map、set 这类我也不清楚是否应该将其放在数据类型章节，姑且就先放在这里。</p><p>像 proxy、reflect 等后续也可能会考虑新建一个模块，专门对 ES6+ 进行说明，姑且也先放在这里。 各位看官请不要介意。</p><h3 id="什么是深-浅拷贝" tabindex="-1"><a class="header-anchor" href="#什么是深-浅拷贝" aria-hidden="true">#</a> 什么是深/浅拷贝？</h3><p>浅拷贝：浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p><p>深拷贝：深拷贝是将一个对象从内存中完整的拷贝一份出来，从堆内存中开辟一个新的区域存放新对象，且修改新对象不会影响原对象。</p><p>简单来说：当 B 复制了 A，当修改 A 时，看 B 是否会发生变化。如果 B 发生变化就是浅拷贝；如果 B 没变化就是深拷贝。</p><p>同时我们会在后面手写代码的章节，自己来实现一个深拷贝，方便大家理解。</p><h3 id="什么是-json" tabindex="-1"><a class="header-anchor" href="#什么是-json" aria-hidden="true">#</a> 什么是 JSON？</h3><ul><li>JSON 是一种数据格式，本质是一段字符串。</li><li>JSON 格式和 JS 对象结构一致，对 JS 语言更友好。</li><li>window.JSON 是一个全局对象</li><li>常用方法： <ul><li>JSON.stringify：对象转为字符串</li><li>JSON.parse：字符串转为对象</li></ul></li></ul><h3 id="symbol-是什么" tabindex="-1"><a class="header-anchor" href="#symbol-是什么" aria-hidden="true">#</a> Symbol 是什么？</h3><ul><li>定义：Symbol 是 ES6中新的原始数据类型，表示独一无二的值。</li><li>注意事项： <ul><li>Symbol 不能使用 new 运算符，会报错。</li><li>Symbol 和任何值都不相等，除非使用 Symbol.for() 声明变量。</li><li>Symbol 不能与其他类型进行计算。</li><li>Symbol 作为属性名，不会被遍历，但是可以通过 Object.getOwnPropertySymbols 方法获取指定对象的所有 Symbol 属性名。</li></ul></li></ul><h3 id="es6module-和-commonjs-模块化的异同点" tabindex="-1"><a class="header-anchor" href="#es6module-和-commonjs-模块化的异同点" aria-hidden="true">#</a> ES6Module 和 CommonJS 模块化的异同点？🌟</h3><p>模块化的作用：提高了项目的可维护、可拓展和可协作性。</p><p>使用场景：我们在浏览器中使用 ES6 的模块化支持，在 Node 中使用 CommonJS 的模块化支持。（注意 webpack 中的 Tree-Shaking 只有 ES6Module 支持，我们会在 webpack 里面进行详细说明）</p><p>区别：</p><table><thead><tr><th style="text-align:center;">区别点</th><th style="text-align:center;">ES6Module 形式</th><th style="text-align:center;">CommonJS</th></tr></thead><tbody><tr><td style="text-align:center;">使用</td><td style="text-align:center;">import / export</td><td style="text-align:center;">require / module.exports / exports</td></tr><tr><td style="text-align:center;">是否支持动态引入</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">同/异步</td><td style="text-align:center;">异步</td><td style="text-align:center;">同步</td></tr><tr><td style="text-align:center;">导入方式</td><td style="text-align:center;">是值拷贝，导出值变化不会影响导入值</td><td style="text-align:center;">是值的引用，导入值会随导出值而变化</td></tr><tr><td style="text-align:center;">导出方式</td><td style="text-align:center;">可以导出多个</td><td style="text-align:center;">单个值的导出</td></tr><tr><td style="text-align:center;">this 指向</td><td style="text-align:center;">this 是 undefined</td><td style="text-align:center;">this 是当前模块</td></tr></tbody></table><h3 id="set、map、weakset、weakmap-之间区别" tabindex="-1"><a class="header-anchor" href="#set、map、weakset、weakmap-之间区别" aria-hidden="true">#</a> Set、Map、WeakSet、WeakMap 之间区别？🌟</h3><ul><li>Set：类似于数组，成员的值是唯一的，但不是数组，是一种特殊的对象。 <ul><li>Set 中对于值的比较是使用===进行判断的，但是 NaN 只能有一个。</li><li>Set.prototype.size：返回实例成员总数。</li><li>add(value)：添加某个值，返回 Set 本身。</li><li>delete(value)：删除某个值，返回布尔类型。</li><li>has(value)：表示参数是否为 Set 的成员，返回布尔类型。</li><li>clear()：清除所有成员，没有返回值。</li><li>可以使用 forEach()、for...of 进行遍历。</li></ul></li><li>WeakSet：WeakSet 结构与 Set 类似，也是不重复的值的集合。 <ul><li>与 Set 不同点1：成员只能是对象，不能是其他类型的值。</li><li>与 Set 不同点2：WeakSet 中对象都是弱引用，所以不能遍历。</li><li>与 Set 不同点3：只有 add、delete、has 方法，没有 size、clear。</li><li>与 Set 不同点4：不能进行便利操作。</li></ul></li><li>Map：类似于对象，但是 key 值不局限于字符串，可以是各种类型的值。 <ul><li>Map.Prototype.size：返回 Map 结构的成员总数。</li><li>set(key, value)：设置 key 对应的键值，然后返回整个 Map 结构。</li><li>get(key)：读取 key 对应的键值，如果找不到 key 则返回 undefined。</li><li>has(key)：返回一个布尔值，表示某个键是否在 Map 数据结构中。</li><li>delete(key)：删除某个键，返回 true，删除失败则返回false。</li><li>clear()：清除所有成员，没有返回值。</li><li>可以使用 forEach、keys、values、entries 进行遍历。</li></ul></li><li>WeakMap：WeakMap 结构与 Map 类似，也用于生成键值对的集合。 <ul><li>与 Map 不同点1：WeakMap 只接受对象作为键名，不接受其他类型值作为键名。</li><li>与 Map 不同点2：WeakMap 的键名所指的对象不计入垃圾回收机制。</li><li>与 Map 不同点3：只有 set、get、has、delete方法，没有 size、clear。</li><li>与 Map 不同点4：不能进行遍历操作。</li></ul></li></ul><h3 id="你对-proxy-的理解" tabindex="-1"><a class="header-anchor" href="#你对-proxy-的理解" aria-hidden="true">#</a> 你对 Proxy 的理解？</h3><ul><li>定义：用于修改某些操作的默认行为，等同于在语言层面作出修改。（实际就是代理，对外界的访问进行过滤和改写）</li><li>使用：let proxy = new Proxy(target, handler)</li><li>实例的方法： <ul><li>get()：用于拦截某个属性的读取操作。</li><li>set()：用于拦截某个属性的赋值操作。</li><li>apply()：用于拦截函数的调用、call 和 apply 操作。</li><li>has()：用于拦截 HasProperty 操作，即判断对象是否有某个属性，这个方法会生效。</li><li>construct()：用于拦截 new 命令。</li><li>deleteProperty()：用于拦截 delete 操作，如果这方法返回 false 或者抛出错误，当前属性就无法被删除。</li><li>defineProperty()：用于拦截 Object.defineProperty 操作。</li><li>getOwnPropertyDescriptor()：用于拦截 Object.getOwnPropertyDescriptor()，返回一个属性描述对象或者 undefined。</li><li>getPrototypeOf()：用于拦截获取对象原型，具体如下： <ul><li>Object.prototype.__proto__</li><li>Object.prototype.isPrototypeOf()</li><li>Object.getPrototypeOf()</li><li>Reflect.getPrototypeOf()</li></ul></li><li>isExtensible()：用于拦截 Object.isExtensible 操作，只能返回布尔值。</li><li>ownKeys()：用于拦截对象自身属性的读取操作，具体如下： <ul><li>Object.getOwnPropertyNames()</li><li>Object.getOwnPropertySymbols()</li><li>Object.keys()</li></ul></li><li>preventExtensions()：用于拦截 Object.preventExtensions()。</li><li>setPrototypeOf()：用于拦截 Object.setPrototypeOf 方法。</li></ul></li></ul><h3 id="你对-reflect-的理解" tabindex="-1"><a class="header-anchor" href="#你对-reflect-的理解" aria-hidden="true">#</a> 你对 Reflect 的理解？</h3><ul><li>定义：Reflect 与 Proxy 一样，也是 ES6为了操作对象而提供的新 API。</li><li>目的： <ul><li>将 Object 对象的一些明显的语言内部的方法放到 Reflect 对象上。</li><li>修改某些 Object 方法的返回结果，让其变得更合理。</li><li>让 Object 操作都变成函数行为。</li><li>Reflect 对象的方法与 Proxy 对象的方法一一对应，使 Proxy 对象可以方便的调用 Reflect 方法完成默认行为。（无论 Proxy 怎么修改默认行为，我们总可以在 Reflect 上获取默认行为）</li></ul></li><li>实例的方法： <ul><li>get(target, name, receiver)：查找并返回 target 对象的 name 属性，如果没有该属性则返回 undefined。</li><li>set(target, name, value, receiver)：设置 target 对象的 name 属性等于 value。</li><li>apply(func, thisArg, args)：等同于 Function.prototype.apply.call(func, thisArg, args），用于绑定 this 对象后执行给定函数。</li><li>has(obj, name)：对应 name in obj 中的 in 运算符。</li><li>construct(target, args)：等同于 new target(...args)，提供了一种不使用 new 来调用构造函数的方法。</li><li>deleteProperty(obj, name)：对应 delete obj[name]，用于删除对象的属性。</li><li>defineProperty(target, propertyKey, attributes)：等同于 Object.defineProperty，用来为对象定义属性。</li><li>getOwnPropertyDescriptor(target, propertyKey)：等同于 Object.getOwnPropertyDescriptor，用来获取指定属性的描述对象。</li><li>getPrototypeOf(obj)：用于读取对象的 __proto__ 属性，对应 Object.getPrototypeOf(obj)。</li><li>isExtensible(target)：对应 Object.isExtensible，返回一个布尔值，表示当前对象是否可扩展。</li><li>ownKeys(target)：用于返回对象的所有属性，基本等同于 Object.getOwnPropertyNames 与 Object.getOwnPropertySymbols 之和。</li><li>preventExtensions(target)：对应 Object.preventExtensions 方法，用于使一个对象变为不可扩展的。</li><li>setPrototypeOf(obj, newProto)：用于设置对象的 __proto__ 属性，返回第一个参数对象，对应 Object.setPrototypeOf(obj, newProto)。</li></ul></li></ul><h3 id="babel-编译原理" tabindex="-1"><a class="header-anchor" href="#babel-编译原理" aria-hidden="true">#</a> babel 编译原理？</h3><ol><li>babylon 将 ES6及其以上版本的代码解析成 AST 树。</li><li>babel-traverse 将 AST 树进行遍历，得到新的 AST 树。</li><li>新 AST 树通过 babel-generator 转换为 ES5 语法。</li></ol><h3 id="babel-环境搭建和基本配置" tabindex="-1"><a class="header-anchor" href="#babel-环境搭建和基本配置" aria-hidden="true">#</a> babel 环境搭建和基本配置</h3><ul><li>.babelrc：此文件用于配置转码规则和插件。</li><li>@babel/preset-env：满足大多数的 ES6+ 语法，是很多 babel-plugin 的集合。</li><li>babel-polyfill：满足大多数新 API（已经被弃用） <ul><li>babel-polyfill 是 core-js 和 regenerator 的集合。</li><li>推荐直接使用 core-js 和 regenerator。</li><li>只处理新的 API，不处理模块化，需要 webpack 处理。</li><li>文件较大，需要按需引入。</li><li>会污染全局环境，将不支持的语法挂载到 window 上。</li></ul></li><li>babel-runtime：因为直接使用 babel-polyfill 会污染全局，使用 babel-runtime 可以更改要挂载的全局变量名称，不会污染全局。</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n  &quot;presets&quot;: [\n    [&quot;@babel/preset-env&quot;, {\n      &quot;modules&quot;: false,\n      &quot;targets&quot;: {\n        &quot;ie&quot;: &quot;8&quot;\n      },\n      // babel-polyfill 按需引入\n      &quot;useBuiltIns&quot;: &quot;usage&quot;\n    }]\n  ],\n  &quot;plugins&quot;: [\n    [\n      &quot;@babel/plugin-transform-modules-commonjs&quot;,\n      {\n        &quot;allowTopLevelThis&quot;: true\n      }\n    ],\n    [\n      &quot;@babel/plugin-transform-runtime&quot;,\n      {\n        &quot;corejs&quot;: 3\n      }\n    ],\n    // @babel/preset-env 中没有的 babel-plugin\n    &quot;@babel/plugin-syntax-dynamic-import&quot;,\n    &quot;@babel/plugin-syntax-import-meta&quot;,\n    &quot;@babel/plugin-proposal-class-properties&quot;,\n    &quot;@babel/plugin-proposal-json-strings&quot;\n  ]\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="ast-是什么" tabindex="-1"><a class="header-anchor" href="#ast-是什么" aria-hidden="true">#</a> AST 是什么？</h3><ul><li>定义：AST 的全称为抽象语法树，是将代码逐字母解析成树状对象的形式。</li><li>作用：语言之间的代码转换、代码语法检查、代码风格检查、代码格式化、代码自动补全等功能的基础。</li></ul><h3 id="谈谈对面向对象的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对面向对象的理解" aria-hidden="true">#</a> 谈谈对面向对象的理解？🌟</h3><ul><li>定义：把不同的事务分解成一个个对象，然后由对象之间分工合作。</li><li>核心：面向对象的两个核心就是类和对象。 <ul><li>类：对具有相同属性和方法的对象的抽离。</li><li>对象：一组无序的相关属性和方法的集合。</li><li>两者关系：类的实例就是对象，可以理解为类为模具，对象是根据模具创造的产品。</li></ul></li><li>特点：面向对象的特点为继承性、多态性、封装性。 <ul><li>继承：子类继承父类，子类与父类表现的很像，当然子类可以具有自己的属性和方法。</li><li>多态：子类重写父类，继承同一个父类的子类，对同一属性和方法表现的不同。</li><li>封装：内部实现细节对外部隐藏，使用属性描述符（private、public、protected）来控制成员的访问。</li></ul></li><li>继承的实现：class、构造函数式继承、原型链继承、组合式继承、寄生组合式继承。</li><li>为什么使用面向对象：降低程序之间的耦合，提升代码的复用性、灵活性和可扩展性。</li></ul><h3 id="观察者模式-vs-发布-订阅模式" tabindex="-1"><a class="header-anchor" href="#观察者模式-vs-发布-订阅模式" aria-hidden="true">#</a> 观察者模式 VS 发布-订阅模式？</h3><p>观察者模式中主体和观察者是互相感知的，发布-订阅模式是借助第三方来实现调度的，发布者和订阅者之间互不感知</p><ul><li>观察者模式就好像 个体奶农和个人的关系。奶农负责统计有多少人订了产品，所以个人都会有一个相同拿牛奶的方法。奶农有新奶了就负责调用这个方法。</li><li>发布-订阅模式就好像报社， 邮局和个人的关系，报纸的订阅和分发是由邮局来完成的。报社只负责将报纸发送给邮局。</li></ul><img src="/image/JS/两种模式.png" width="500" height="400">',37),a={},n=(0,t(3744).Z)(a,[["render",function(e,l){return i}]])},3744:(e,l)=>{l.Z=(e,l)=>{const t=e.__vccOpts||e;for(const[e,i]of l)t[e]=i;return t}}}]);