"use strict";(self.webpackChunkinterview_fe=self.webpackChunkinterview_fe||[]).push([[829],{4077:(a,e,n)=>{n.r(e),n.d(e,{data:()=>s});const s={key:"v-d300ec3a",path:"/HTML/HTML.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"HTML 基础知识",slug:"html-基础知识",children:[{level:3,title:"前言",slug:"前言",children:[]},{level:3,title:"DOCTYPE 的作用是什么？",slug:"doctype-的作用是什么",children:[]},{level:3,title:"有哪些常见的 meta 标签？",slug:"有哪些常见的-meta-标签",children:[]},{level:3,title:"src 和 href 的区别？",slug:"src-和-href-的区别",children:[]},{level:3,title:"script 标签中的 defer 和 async 的区别？🌟",slug:"script-标签中的-defer-和-async-的区别",children:[]},{level:3,title:"什么是 data- 属性？",slug:"什么是-data-属性",children:[]},{level:3,title:"HTML5 的特新有哪些？🌟",slug:"html5-的特新有哪些",children:[]},{level:3,title:"常见块级元素和行内元素有哪些？",slug:"常见块级元素和行内元素有哪些",children:[]},{level:3,title:"谈谈你对 HTML 语义化的理解",slug:"谈谈你对-html-语义化的理解",children:[]},{level:3,title:"前端对存储方式有哪些？🌟",slug:"前端对存储方式有哪些",children:[]},{level:3,title:"设计一个有过期时间的 localStorage",slug:"设计一个有过期时间的-localstorage",children:[]},{level:3,title:"storage 在无痕模式下被禁用，如果解决？",slug:"storage-在无痕模式下被禁用-如果解决",children:[]},{level:3,title:"如何判断浏览器时无痕模式？",slug:"如何判断浏览器时无痕模式",children:[]}]}],filePathRelative:"HTML/HTML.md",git:{updatedTime:1637142456e3,contributors:[{name:"brightLian",email:"brightLian@126.com",commits:1}]}}},2560:(a,e,n)=>{n.r(e),n.d(e,{default:()=>l});const s=(0,n(6252).uE)('<h2 id="html-基础知识" tabindex="-1"><a class="header-anchor" href="#html-基础知识" aria-hidden="true">#</a> HTML 基础知识</h2><h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h3><p>HTML 部分相对比较简单，能在实际中出现的面试题也比较少。<br> 但是它又是前端构建页面的一个基石，接下来我们进行这部分的学习。<br> 如果你时间紧迫，可以直接看标有🌟的题目。</p><h3 id="doctype-的作用是什么" tabindex="-1"><a class="header-anchor" href="#doctype-的作用是什么" aria-hidden="true">#</a> DOCTYPE 的作用是什么？</h3><p><strong>定义：</strong> DOCTYPE 是 html5标准网页声明，且必须声明在文档的第一行。<br><strong>作用：</strong> 用来告诉浏览器的解析器以何种方式来解析文档，不同的解析方式会影响到浏览器对于 CSS 代码甚至 JavaScript 脚本的解析。<br><strong>类型：</strong> 怪异类型和标准类型。</p><h3 id="有哪些常见的-meta-标签" tabindex="-1"><a class="header-anchor" href="#有哪些常见的-meta-标签" aria-hidden="true">#</a> 有哪些常见的 meta 标签？</h3><ul><li>charset：用于定义 HTML 文档的编码格式</li><li>http-equiv：相当于 http 的头文件，用于定义过期日期等</li><li>viewport：用于控制视口相关属性</li><li>description：SEO 相关，用于定义文档的描述</li><li>keywords：SEO 相关，用于定义文档的关键字</li><li>robots：SEO 相关，定义蜘蛛在文档中的爬取路径</li></ul><p>后面上个较为重要，主要涉及到 SEO 3要素 TDK 中的 DK 以及 robots。</p><h3 id="src-和-href-的区别" tabindex="-1"><a class="header-anchor" href="#src-和-href-的区别" aria-hidden="true">#</a> src 和 href 的区别？</h3><ul><li>src：指外部资源文件，浏览器解析到该元素时，会暂停对其他资源的下载和处理直到该资源加载、编译、执行完成。(script 需要放在最下面的原因)</li><li>href：指文档与引用资源的关系，浏览器解析到该元素时，会并行下载资源，不会停止对当前文档的处理。</li></ul><h3 id="script-标签中的-defer-和-async-的区别" tabindex="-1"><a class="header-anchor" href="#script-标签中的-defer-和-async-的区别" aria-hidden="true">#</a> script 标签中的 defer 和 async 的区别？🌟</h3><p>两者都会立即下载脚本，但是注意脚本的执行时机不同</p><ul><li>defer：立即下载脚本，在文档解析完毕后执行</li><li>async：立即下载脚本，在文档下载完毕后立即执行（注意文档对脚本文件有依赖时不要使用） <img src="/image/HTML/scriptDeferAndAsync.png" width="900" height="200"></li></ul><h3 id="什么是-data-属性" tabindex="-1"><a class="header-anchor" href="#什么是-data-属性" aria-hidden="true">#</a> 什么是 data- 属性？</h3><p>是 HTML 的数据属性，用来将数据存储于标准的 HTML 中作为额外的信息，我们可以通过 js 来访问它。</p><h3 id="html5-的特新有哪些" tabindex="-1"><a class="header-anchor" href="#html5-的特新有哪些" aria-hidden="true">#</a> HTML5 的特新有哪些？🌟</h3><ul><li>标签相关：新增了一些更加语义化的标签，废除了一些表现型的标签（i、u、tt 等）</li><li>存储相关：丰富了前端的存储方式，包括 sessionStorage、localStorage、indexedDB 等</li><li>新增 API：丰富了一些前端功能，比如 canvas、音视频相关、地图、websocket 等</li></ul><h3 id="常见块级元素和行内元素有哪些" tabindex="-1"><a class="header-anchor" href="#常见块级元素和行内元素有哪些" aria-hidden="true">#</a> 常见块级元素和行内元素有哪些？</h3><ul><li>块级元素：div、p、h1-h6、header、footer、article、section 等</li><li>行内元素：span、a、img、input、textarea、select、sub、sup 等</li></ul><h3 id="谈谈你对-html-语义化的理解" tabindex="-1"><a class="header-anchor" href="#谈谈你对-html-语义化的理解" aria-hidden="true">#</a> 谈谈你对 HTML 语义化的理解</h3><ul><li>定义：是指使用恰当的 HTML 标签，让页面具有良好的结构。</li><li>优点： <ul><li>对开发者友好：增加了代码的可读性，方便开发者阅读和维护</li><li>对 SEO 友好：良好的代码结构方便搜索引擎对抓取</li><li>对残障人士友好：方便读屏软件为用户提供无障碍阅读功能</li></ul></li></ul><h3 id="前端对存储方式有哪些" tabindex="-1"><a class="header-anchor" href="#前端对存储方式有哪些" aria-hidden="true">#</a> 前端对存储方式有哪些？🌟</h3><ul><li>cookie：存储在浏览器本地，大小只有4k，需要设置过期时间也可以手动清除，会在同源的请求中自动携带。</li><li>sessionStorage：存储在浏览器本地，大小为5M，只在本次会话中有效也可以手动清除，不会在请求中携带。</li><li>localStorage：存储在浏览器本地，大小为5M，没有过期时间但是可以手动清楚，不会再请求中携带。</li></ul><h3 id="设计一个有过期时间的-localstorage" tabindex="-1"><a class="header-anchor" href="#设计一个有过期时间的-localstorage" aria-hidden="true">#</a> 设计一个有过期时间的 localStorage</h3><p>分为两个 key 来存储：第一个 key 用于存储过期时间、第二个 key 用来存储真实的数据。</p><ul><li>第一次请求服务端获取数据时：在 localStorage 中分别存储数据和过期时间。</li><li>后续请求时：先判断过期时间是否过期。</li><li>如果没有过期：直接使用已经存储的数据。</li><li>如果已经过期：去服务端请求新的数据，并重复第一步的操作。</li></ul><h3 id="storage-在无痕模式下被禁用-如果解决" tabindex="-1"><a class="header-anchor" href="#storage-在无痕模式下被禁用-如果解决" aria-hidden="true">#</a> storage 在无痕模式下被禁用，如果解决？</h3><ul><li>必须使用 storage 时，判断是无痕模式给用户强提示或者通过接口先暂时存储数据。</li><li>非必须使用 storage 时，可以暂时存储在全局或者 cookie 中，但是要及时释放。</li></ul><h3 id="如何判断浏览器时无痕模式" tabindex="-1"><a class="header-anchor" href="#如何判断浏览器时无痕模式" aria-hidden="true">#</a> 如何判断浏览器时无痕模式？</h3><p>在无痕模式中 storage 对象可能时存在的，但是他的 setItem 方法是不可用的，所以采用下面的方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 判断用户是否开启无痕模式</span>\n<span class="token keyword">function</span> <span class="token function">isTraceless</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;test-key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test-value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    storage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',31),t={},l=(0,n(3744).Z)(t,[["render",function(a,e){return s}]])},3744:(a,e)=>{e.Z=(a,e)=>{const n=a.__vccOpts||a;for(const[a,s]of e)n[a]=s;return n}}}]);