"use strict";(self.webpackChunkinterview_fe=self.webpackChunkinterview_fe||[]).push([[49],{8605:(l,i,e)=>{e.r(i),e.d(i,{data:()=>a});const a={key:"v-7e95fe0a",path:"/CSS/CSS.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"CSS 基础知识",slug:"css-基础知识",children:[{level:3,title:"CSS 选择器的优先级？",slug:"css-选择器的优先级",children:[]},{level:3,title:"CSS 盒模型是什么？🌟",slug:"css-盒模型是什么",children:[]},{level:3,title:"margin 设置负值有什么影响？",slug:"margin-设置负值有什么影响",children:[]},{level:3,title:"line-height 如何继承？",slug:"line-height-如何继承",children:[]},{level:3,title:"伪类和伪元素分别是什么？",slug:"伪类和伪元素分别是什么",children:[]},{level:3,title:"什么是雪碧图/精灵图？",slug:"什么是雪碧图-精灵图",children:[]},{level:3,title:"CSS 的定位方式？",slug:"css-的定位方式",children:[]},{level:3,title:"如何清除浮动？",slug:"如何清除浮动",children:[]},{level:3,title:"如何理解 z-index？",slug:"如何理解-z-index",children:[]},{level:3,title:"CSS 隐藏元素的方式？",slug:"css-隐藏元素的方式",children:[]},{level:3,title:"BFC 及其应用🌟",slug:"bfc-及其应用",children:[]},{level:3,title:"什么是响应式布局？🌟",slug:"什么是响应式布局",children:[]},{level:3,title:"媒体查询是什么？",slug:"媒体查询是什么",children:[]},{level:3,title:"#px、em、rem 等单位的区别？",slug:"px、em、rem-等单位的区别",children:[]},{level:3,title:"对 flex 布局的理解以及常用属性？🌟",slug:"对-flex-布局的理解以及常用属性",children:[]},{level:3,title:"对 grid 布局的理解以及常用属性？",slug:"对-grid-布局的理解以及常用属性",children:[]},{level:3,title:"元素水平、垂直、水平垂直居中的方法？🌟",slug:"元素水平、垂直、水平垂直居中的方法",children:[]},{level:3,title:"CSS3新特性有哪些？",slug:"css3新特性有哪些",children:[]},{level:3,title:"谈谈你对 CSS 动画与过渡的理解？",slug:"谈谈你对-css-动画与过渡的理解",children:[]},{level:3,title:"介绍下 requestAnimationFrame？🌟",slug:"介绍下-requestanimationframe",children:[]},{level:3,title:"1像素边框问题如何解决（750为1px，标准325为0.5px）🌟",slug:"_1像素边框问题如何解决-750为1px-标准325为0-5px",children:[]}]}],filePathRelative:"CSS/CSS.md",git:{updatedTime:1637419342e3,contributors:[{name:"brightLian",email:"brightLian@126.com",commits:2}]}}},3781:(l,i,e)=>{e.r(i),e.d(i,{default:()=>h});var a=e(6252);const n=(0,a.uE)('<h2 id="css-基础知识" tabindex="-1"><a class="header-anchor" href="#css-基础知识" aria-hidden="true">#</a> CSS 基础知识</h2><h3 id="css-选择器的优先级" tabindex="-1"><a class="header-anchor" href="#css-选择器的优先级" aria-hidden="true">#</a> CSS 选择器的优先级？</h3><p>!important &gt; 内联样式 &gt; id 选择器 &gt; class 选择器 &gt; 标签选择器 &gt; 通配符选择器 &gt; 继承 &gt; 默认</p><h3 id="css-盒模型是什么" tabindex="-1"><a class="header-anchor" href="#css-盒模型是什么" aria-hidden="true">#</a> CSS 盒模型是什么？🌟</h3><ul><li>定义：浏览器会将一个元素看成一个盒子，CSS 的各种属性来决定盒子的大小、颜色、位置等。</li><li>分类： 标准盒模型和怪异盒模型。 <ul><li>标准盒模型：width 为内容区的宽度，整个元素的宽度为 width + 左右 padding + 左右 border + 左右 margin。</li><li>怪异盒模型：width 为内容区的宽度 + 左右 padding + 左右 border，整个元素的宽度为 width + 左右 margin。</li></ul></li><li>改变；使用 box-sizing 属性。（content-box 为标准盒模型、border-box 为怪异盒模型）</li></ul><h3 id="margin-设置负值有什么影响" tabindex="-1"><a class="header-anchor" href="#margin-设置负值有什么影响" aria-hidden="true">#</a> margin 设置负值有什么影响？</h3><ul><li>margin-top：自己向上移动</li><li>margin-right：自动向右移动</li><li>margin-bottom：下方相邻元素向自己靠近</li><li>margin-left：左方元素向自己靠近</li><li><strong>总结：</strong> 上右影响自己，下左影响相邻元素。</li></ul><h3 id="line-height-如何继承" tabindex="-1"><a class="header-anchor" href="#line-height-如何继承" aria-hidden="true">#</a> line-height 如何继承？</h3><ul><li>写具体数值，直接继承该值（如30px）</li><li>写比例，则继承该比例（如1.5 / 2）</li><li>写百分比，则子元素继承父元素计算出来的值（如父元素的 font-size 为 20px line-height 为 200%，继承时的值为 40px）</li></ul><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.parent</span> <span class="token punctuation">{</span>\n  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>\n  <span class="token property">line-height</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* 此时子元素的 line-height 为40px 不是 36px */</span>\n<span class="token selector">.child</span> <span class="token punctuation">{</span>\n  <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="伪类和伪元素分别是什么" tabindex="-1"><a class="header-anchor" href="#伪类和伪元素分别是什么" aria-hidden="true">#</a> 伪类和伪元素分别是什么？</h3><ul><li>伪类： <ul><li>定义：以一个冒号作为前缀，被添加到一个选择器末尾的字段，当你希望样式在特定状态下才被呈现到指定元素时使用。</li><li>常用：hover、focus、first-child、nth-child 等。</li></ul></li><li>伪元素： <ul><li>定义：用于创建一些不存在文档树中的元素，并为其添加样式，虽然用户可以看到这些内容，但是在实际的文档中并不存在。</li><li>常用：before、after、first-letter 等</li></ul></li><li>二者区别： <ul><li>伪类是当前文档树真实存在的，指的是不能用普通选择器选择的假类。</li><li>伪元素是当前文档树中不存在的，其核心是在原有的文档树中创建的假元素。</li></ul></li></ul><h3 id="什么是雪碧图-精灵图" tabindex="-1"><a class="header-anchor" href="#什么是雪碧图-精灵图" aria-hidden="true">#</a> 什么是雪碧图/精灵图？</h3><ul><li>定义：开发人员将多个小的图片合并到一起后称为雪碧图。</li><li>使用：通过每张小图片的 background-size、background-position 进行使用。</li><li>优点：减少了加载多张图片时的请求次数。</li><li>缺点：维护成本改，后期修改复杂。同时在使用 HTTP2.0时，因为增加了多路复用就不需要考虑 http 请求数。</li></ul><h3 id="css-的定位方式" tabindex="-1"><a class="header-anchor" href="#css-的定位方式" aria-hidden="true">#</a> CSS 的定位方式？</h3><p>CSS 的常用定位方式有两种，分别为 float 浮动定位和 position 定位。</p><ul><li>float 有以下属性 <ul><li>left：左浮动</li><li>right：右浮动</li></ul></li><li>position 有以下属性 <ul><li>static：默认属性，正常文档流定位</li><li>relative：相对自身原有位置进行定位</li><li>absolute：相对于最近的非 static 的祖先元素进行定位</li><li>fixed：相对于页面的视口进行定位，不会受到页面滚动的影响</li><li>sticky：当元素在屏幕内表现为 relative 的属性，当元素滚动到屏幕外表现为 fixed 的属性。</li></ul></li></ul><h3 id="如何清除浮动" tabindex="-1"><a class="header-anchor" href="#如何清除浮动" aria-hidden="true">#</a> 如何清除浮动？</h3><ul><li>使用 clear 属性</li><li>创建 BFC</li><li>给父元素设置高度</li></ul><h3 id="如何理解-z-index" tabindex="-1"><a class="header-anchor" href="#如何理解-z-index" aria-hidden="true">#</a> 如何理解 z-index？</h3><ul><li>作用：用来控制层叠元素的垂直叠加顺序</li><li>表现：默认为0，设置的值越大，在垂直位置上越靠上</li><li>影响元素：z-index 只会影响设置了 position 不为 static 的元素</li></ul><h3 id="css-隐藏元素的方式" tabindex="-1"><a class="header-anchor" href="#css-隐藏元素的方式" aria-hidden="true">#</a> CSS 隐藏元素的方式？</h3><ul><li>opacity: 0 将透明度设置为0。元素不可见、占据位置、可以交互。</li><li>visibility: hidden 将元素设置为隐藏。元素不可见、占据位置、不可交互。</li><li>transform: scale(0) 将元素缩放为0。元素不可见、占据位置、不可交互。</li><li>display: none 将元素设置不展示。元素不可见、不占据位置、不可交互。</li></ul><h3 id="bfc-及其应用" tabindex="-1"><a class="header-anchor" href="#bfc-及其应用" aria-hidden="true">#</a> BFC 及其应用🌟</h3><ul><li>定义：全称为块级格式化上下文，实际指的是一个独立渲染的区域，这个区域内的元素不会受到区域外元素的影响。</li><li>触发条件： <ul><li>根元素（HTML）</li><li>浮动元素</li><li>position 为 absolute 或者 fixed</li><li>overflow 部位 hidden</li><li>display 为 inline-block、flex、table-cell 等</li></ul></li><li>规则： <ul><li>内部的 box 会在垂直方向上一个一个排列</li><li>同一个 BFC 的两个相邻元素会发生 margin 重叠，俩个 BFC 之间不会发生 margin 重叠</li><li>BFC 区域不会与浮动元素发生重叠</li><li>计算 BFC 的高度时，浮动元素也参与计算</li><li>文字层不会被浮动层覆盖，会环绕在周围</li></ul></li><li>应用： <ul><li>清除浮动</li><li>防止 margin 重叠</li><li>防止元素被浮动元素遮挡</li></ul></li></ul><h3 id="什么是响应式布局" tabindex="-1"><a class="header-anchor" href="#什么是响应式布局" aria-hidden="true">#</a> 什么是响应式布局？🌟</h3><ul><li>定义：在同一页面不同尺寸的屏幕下，展示特定的布局</li><li>优点： <ul><li>面对不同设备的灵活性强</li><li>能够解决多设备下显示不同的问题</li></ul></li><li>缺点： <ul><li>部分方案可能存在兼容性问题（flex 布局和 grid 布局）</li><li>部分方案的工作量比较大（media query）</li></ul></li><li>实现方案： <ul><li>media query：媒体查询的方式，针对不同屏幕信息进行布局</li><li>flex 布局：弹性盒子布局</li><li>grid 布局：网格式布局</li><li>百分比：通过设置百分比是元素随之变化</li><li>vw/vh：通过视口宽高的百分比</li><li>rem：结合 media query 使用，根据不同的屏幕大小设置根节点字体的大小</li><li>rpx：微信小程序特有的单位来实现响应式。</li></ul></li></ul><h3 id="媒体查询是什么" tabindex="-1"><a class="header-anchor" href="#媒体查询是什么" aria-hidden="true">#</a> 媒体查询是什么？</h3><ul><li>定义：通过查询用户的设备信息属于哪种类型，让网页能够在不同的设备下展示特定效果。</li><li>作用：通常用在解决兼容性问题上。</li><li>类型：在 web 应用开发时通常会用到 screen （屏幕）类型，有时调用打印机时会用到 print 类型。</li></ul><h3 id="px、em、rem-等单位的区别" tabindex="-1"><a class="header-anchor" href="#px、em、rem-等单位的区别" aria-hidden="true">#</a> #px、em、rem 等单位的区别？</h3><ul><li>px：绝对单位，精确的像素。</li><li>em：相对单位，如果自身设置了 font-size 时，1em = font-size 的值；自身未设置时为最近祖先元素的 font-size。</li><li>rem：相对单位，相对于根结点 html 的 font-size。</li><li>vw/vh：相对单位，1vw = 视口宽度的1%；1vh = 视口高度的1%。</li><li>rpx：微信小程序提供的单位，为微信小程序提供了自适应的功能。</li></ul><h3 id="对-flex-布局的理解以及常用属性" tabindex="-1"><a class="header-anchor" href="#对-flex-布局的理解以及常用属性" aria-hidden="true">#</a> 对 flex 布局的理解以及常用属性？🌟</h3><ul><li>理解：目前的 web 应用有不同的设备和分辨率，这时需要响应式的页面设计来满足复杂的布局要求。 flex 布局的优势在于我们只需要声明布局应该具有的行为，而不需要给出具体的实现方案，浏览器负责完成布局。 当布局涉及到不定宽度，各种对齐等场景时，可以优先使用 flex 布局。</li><li>容器属性： <ul><li>flex-direction：确定主轴方向。（row | row-reverse | column | column-reverse）</li><li>flex-wrap：确定换行方式。（nowrap | wrap | wrap-reverse）</li><li>flex-flow：上面两个属性的结合，默认值为 row nowrap。</li><li>justify-content：确定主轴上的对齐方式。（flex-start | flex-end | center | space-between | space-around）</li><li>align-items：确定交叉轴上的对齐方式。（flex-start | flex-end | center | baseline | stretch）</li><li>align-content：确定多个轴线的对齐方式。（flex-start | flex-end | center | space-between | space-around | stretch）</li></ul></li><li>项目属性： <ul><li>order：确定项目的排列顺序，数值越小排列越靠前。</li><li>flex-grow：确定项目的放大比例。 <ul><li>默认为0，存在剩余空间也不会放大。</li><li>如果所有项目的 flex-grow 都等于1，就等分剩余空间。</li><li>如果其中一个项目为2其他项目都为1，前者占据剩余空间比其他多一倍。</li></ul></li><li>flex-shrink：确定项目的缩小比例。 <ul><li>默认为1，如果空间不足该项目缩小。</li><li>如果所有项目的 flex-shrink 都等于1，空间不足时等比例缩小。</li><li>如果其中一个项目为0其他项目都为1，空间不足时前者不会缩小。</li></ul></li><li>flex-basis：确定在分配多余空间前，项目占据的主轴空间。 <ul><li>浏览器根据这个属性，计算主轴是否有剩余空间，默认为auto。</li><li>他可以设为跟 width 或 height 属性相同的值，项目将占据固定空间。</li></ul></li><li>flex：是 flex-grow、flex-shrink、flex-basis 的简写。 <ul><li>默认值为 flex: 0 1 auto，表示不放大会缩小。</li><li>flex:none 时，是 flex: 0 0 auto，表示不放大也不缩小。</li><li>flex:auto 时，是 flex: 1 1 auto，表示放大且缩小。</li><li>值为一个非负数字时：flex-grow被定义，flex-shark为1，flex-basis 为0%。</li><li>值为两个非负数字时：flex-grow 和 flex-shrink 依次被定义，flex-basis 为0%。</li><li>值为一个长度或者百分比时：flex-basis 被定义，flex-grow 和 flex-shrink 为1。</li><li>值为一个非负数字和一个长度or百分比时：flex-grow 和 flex-basis 依次被定义，flex-shrink 为1。</li><li>总结，flex-grow 和 flex-shrink 不规定则为1，flex-basis 不规定则为0%。</li></ul></li><li>align-self：允许单个项目与其他项目对齐方式不同。（auto | flex-start | flex-end | center | baseline | stretch）</li></ul></li></ul><h3 id="对-grid-布局的理解以及常用属性" tabindex="-1"><a class="header-anchor" href="#对-grid-布局的理解以及常用属性" aria-hidden="true">#</a> 对 grid 布局的理解以及常用属性？</h3>',34),t={href:"https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html",target:"_blank",rel:"noopener noreferrer"},s=(0,a.Uk)("grid布局教程-阮一峰"),r=(0,a.uE)('<h3 id="元素水平、垂直、水平垂直居中的方法" tabindex="-1"><a class="header-anchor" href="#元素水平、垂直、水平垂直居中的方法" aria-hidden="true">#</a> 元素水平、垂直、水平垂直居中的方法？🌟</h3><ul><li>水平居中： <ul><li>行内元素水平居中： <ul><li>text-align: center</li></ul></li><li>定宽块级元素水平居中： <ul><li>margin: 0 auto</li><li>position: absolute + left: 50% + margin-left: -width/2</li></ul></li><li>不定宽块级元素水平居中： <ul><li>position: absolute + left: 50% + transform: translateX(-50%);</li><li>父元素 display: flex + justify-content: center;</li></ul></li></ul></li><li>垂直居中： <ul><li>行内元素垂直居中： <ul><li>line-height = height</li></ul></li><li>定宽块级元素垂直居中： <ul><li>position: absolute + top: 50% + margin-top: -height/2</li></ul></li><li>不定宽块级元素垂直居中： <ul><li>position: absolute + top: 50% + transform: translateY(-50%);</li><li>父元素 display: flex + align-items: center;</li></ul></li></ul></li><li>水平垂直居中： <ul><li>不定宽不定高元素水平垂直居中： <ul><li>position: absolute + top: 50%; left: 50%; transform: translate(-50%, -50%);</li><li>子元素 position: absolute + top: 0 + right:0 + bottom:0 + left: 0 + margin: auto;（万能方式，兼容 IE 版本）</li><li>父元素 display: flex + justify-content: center + align-items: center;</li></ul></li></ul></li></ul><h3 id="css3新特性有哪些" tabindex="-1"><a class="header-anchor" href="#css3新特性有哪些" aria-hidden="true">#</a> CSS3新特性有哪些？</h3><ul><li>背景：background-size、background-position 等</li><li>边框：border-radius、border-image 等</li><li>阴影：文本阴影 text-shadow、元素阴影 box-shadow</li><li>伪类选择器：nth-child、first-child、last-child 等</li><li>渐变：线性渐变 line-gradient、径向渐变 radial-gradient</li><li>2D、3D 变换：移动元素 translate、缩放 scale、旋转 rotate 等</li><li>flex 布局</li></ul><h3 id="谈谈你对-css-动画与过渡的理解" tabindex="-1"><a class="header-anchor" href="#谈谈你对-css-动画与过渡的理解" aria-hidden="true">#</a> 谈谈你对 CSS 动画与过渡的理解？</h3><ul><li>动画 animation： <ul><li>animation-name：动画名称</li><li>animation-duration：动画间隔</li><li>animation-fill-mode：动画静止模式</li></ul></li><li>过渡 transition： <ul><li>transition-property：过渡属性</li><li>transition-duration：过渡间隔</li><li>transition-delay：过渡延迟</li></ul></li><li>动画属性： <ul><li>translate：偏移</li><li>scale：缩放</li><li>rotate：旋转</li><li>opacity：透明度</li></ul></li></ul><h3 id="介绍下-requestanimationframe" tabindex="-1"><a class="header-anchor" href="#介绍下-requestanimationframe" aria-hidden="true">#</a> 介绍下 requestAnimationFrame？🌟</h3><p>功能：用来实现动画持久化。要求浏览器在下次重绘之前调用指定的回调函数更新动画。 使用方式就是将要被控制频率的代码放入 window.requestAnimationFrame 中。</p><ul><li>要想动画流畅，更新频率要60帧/s，即16.67ms 更新一次视图</li><li>setTimeout 要手动控制频率，而 RAF 浏览器会自动控制</li><li>后台标签或隐藏 iframe 中，RAF 会暂停，而 setTimeout 依然执行</li></ul><h3 id="_1像素边框问题如何解决-750为1px-标准325为0-5px" tabindex="-1"><a class="header-anchor" href="#_1像素边框问题如何解决-750为1px-标准325为0-5px" aria-hidden="true">#</a> 1像素边框问题如何解决（750为1px，标准325为0.5px）🌟</h3><ul><li>采用 transform: scale 加伪类标签</li><li>采用 base64 编码来实现</li><li>采用阴影模拟边框 box-shadow: 0 0 1px 0 #000 inset（但是颜色会变浅）</li><li>采用 svg 图片形式，利用 svg 描边，svg 的1像素不会受到屏幕的影响。</li></ul>',11),u={},h=(0,e(3744).Z)(u,[["render",function(l,i){const e=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[n,(0,a._)("p",null,[(0,a._)("a",t,[s,(0,a.Wm)(e)])]),r],64)}]])},3744:(l,i)=>{i.Z=(l,i)=>{const e=l.__vccOpts||l;for(const[l,a]of i)e[l]=a;return e}}}]);